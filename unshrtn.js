// Generated by CoffeeScript 1.8.0
(function() {
  var app, db, express, jar, level, lookup, request, stream, unshorten, userAgent;

  level = require('level');

  stream = require('stream');

  express = require('express');

  request = require('request');

  app = express();

  app.set('json spaces', 2);

  db = level('./unshrtndb');

  jar = request.jar();

  process.setMaxListeners(10);

  userAgent = "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1985.67 Safari/537.36";

  app.get("/", function(req, res) {
    var short;
    short = req.query.url;
    if (short) {
      return lookup(short, function(error, long) {
        if (error) {
          console.log("Error: " + error + " - " + short + " -> " + long);
          try {
            return res.json({
              short: short,
              long: long,
              error: error
            });
          } catch (_error) {
            error = _error;
            return console.log("unable to send response: " + error);
          }
        } else {
          console.log("" + short + " -> " + long);
          return res.json({
            short: short,
            long: long
          });
        }
      });
    } else {
      return res.status(400).json({
        short: null,
        long: null,
        error: "please supply url query parameter"
      });
    }
  });

  lookup = function(short, next) {
    if (short === null) {
      next("short url cannot be null", null);
      return;
    }
    short = String(short);
    return db.get(short, function(err, long) {
      if (!err) {
        return next(null, long);
      } else {
        return unshorten(short, function(err, long) {
          if (!err) {
            db.put(short, long, function(e) {});
            if (err) {
              console.log("unable to write to leveldb:", e);
            }
          }
          return next(err, long);
        });
      }
    });
  };

  unshorten = function(short, next) {
    var error, opts, req, sent;
    opts = {
      url: short,
      jar: jar,
      timeout: 10000,
      headers: {
        "User-Agent": userAgent
      }
    };
    sent = false;
    try {
      req = request(opts);
      req.on('response', function(resp) {
        sent = true;
        if (resp.statusCode >= 200 && resp.statusCode < 300) {
          next(null, resp.request.uri.href);
        } else {
          next("HTTP " + resp.statusCode, resp.request.uri.href);
        }
        return resp.on('data', function(chunk) {});
      });
      return req.on('error', function(e) {
        if (!sent) {
          return next(String(e), null);
        }
      });
    } catch (_error) {
      error = _error;
      if (!sent) {
        return next(error, null);
      }
    }
  };

  if (require.main === module) {
    app.listen(3000);
  }

  exports.unshorten = unshorten;

}).call(this);
